import os
from typing import Callable

import pandas as pd

from simo_tools import constants as cons


def get_filetype(path: str):
    """
    Returns filetype from full path.
    """
    *_, filetype = os.path.splitext(path)
    return filetype.strip(".")


def _sanitize_column_names(df: pd.DataFrame) -> pd.DataFrame:
    """
    Make column names are lower case characters.
    """
    df.columns = df.columns.str.lower()
    return df


def _import_csv(path: str):
    df = pd.read_csv(path, index_col=[0])

    df.rename(
        columns={
            cons.PARTICLE: cons.TRAJECTORY,
            cons.M2: cons.Cutoffs.BRIGHTNESS,
        },
        inplace=True,
    )
    df = _sanitize_column_names(df)
    return df


#   def _import_xml(self, filepath: str) -> pd.DataFrame:
#     """Read in an xml file generated by trackmate in ImageJ."""
#     root = ET.fromstring(open(filepath, encoding="utf-8").read())
#     # Find column names based on first entry
#     df = pd.DataFrame(columns=[cons.TRAJECTORY, *root[0][0].attrib.keys()])
#     for i, val in enumerate(root):
#         traj_dict = defaultdict(list)
#         for j in val:
#             for k, v in j.attrib.items():
#                 traj_dict[k].append(v)
#         # Create and combine row based on dictionary of key value pairs
#         traj_df = pd.DataFrame.from_dict(traj_dict).assign(Trajectory=i + 1)
#         df = pd.concat([df, traj_df]).reset_index(drop=True)
#     df.rename(columns={"t": cons.FRAME}, inplace=True)
#     df[cons.Coordinates.X], df[cons.Coordinates.Y] = df[
#         cons.Coordinates.X
#     ].astype(float), df[cons.Coordinates.Y].astype(float)
#     df[cons.Coordinates.X] *= self._framestep**-1
#     df[cons.Coordinates.Y] *= self._framestep**-1
#     df = self._sanitize_column_names(df)
#     return df


FILETYPE_TO_FUNC: dict[str, Callable] = {
    cons.ReadFileTypes.CSV: _import_csv,  # particle tracker
    # cons.ReadFileTypes.XML: self._import_xml,  # trackmate
    # cons.ReadFileTypes.ND2: self._import_nd2,  # raw nd2 movie
}


def import_table(path: str) -> pd.DataFrame:
    """
    Loads in dataframe using method based on detected filetype.
    """
    filetype = get_filetype(path)
    try:
        return FILETYPE_TO_FUNC[filetype](path)
    except KeyError as exc:
        raise ValueError(
            f"Given filetype: `{filetype}` must be one of"
            f" {', '.join(cons.ReadFileTypes.set_of_options())}."
        ) from exc
